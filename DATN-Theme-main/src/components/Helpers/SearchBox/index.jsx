import { useNavigate } from 'react-router-dom';
import { useState } from 'react';

export default function SearchBox({ className, type }) {
  const [searchText, setSearchText] = useState('');
  const [isListening, setIsListening] = useState(false);  // Tr·∫°ng th√°i ƒëang nghe
  const navigate = useNavigate();

  // Kh·ªüi t·∫°o SpeechRecognition
  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  const recognition = new SpeechRecognition();
  recognition.continuous = false;
  recognition.lang = 'vi-VN';  // Ng√¥n ng·ªØ ti·∫øng Vi·ªát

  // X·ª≠ l√Ω k·∫øt qu·∫£ nh·∫≠n d·∫°ng gi·ªçng n√≥i
  const handleVoiceSearch = () => {
    if (isListening) {
      return; // N·∫øu ƒëang nghe, kh√¥ng cho ph√©p nh·∫•n l·∫°i
    }
    
    setIsListening(true); // ƒê·∫∑t tr·∫°ng th√°i "ƒëang nghe"
  
    recognition.start(); // B·∫Øt ƒë·∫ßu nh·∫≠n di·ªán gi·ªçng n√≥i
  
    recognition.onstart = () => {
      console.log("ƒêang nh·∫≠n d·∫°ng gi·ªçng n√≥i...");
    };
  
    recognition.onresult = (event) => {
      const transcript = event.results[0][0].transcript;
      setSearchText(transcript); // C·∫≠p nh·∫≠t t·ª´ kh√≥a t√¨m ki·∫øm v·ªõi vƒÉn b·∫£n chuy·ªÉn t·ª´ gi·ªçng n√≥i
      setIsListening(false); // D·ª´ng tr·∫°ng th√°i "ƒëang nghe" khi c√≥ k·∫øt qu·∫£

      // T·ª± ƒë·ªông g·ªçi h√†m t√¨m ki·∫øm sau khi c√≥ k·∫øt qu·∫£ nh·∫≠n di·ªán gi·ªçng n√≥i
      handleRedirect(transcript);
    };
  
    recognition.onerror = (event) => {
      console.error('L·ªói nh·∫≠n d·∫°ng gi·ªçng n√≥i: ', event.error);
      if (event.error === 'no-speech') {
        alert('Kh√¥ng c√≥ √¢m thanh ƒë∆∞·ª£c nh·∫≠n di·ªán. H√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n ƒëang n√≥i v√†o microphone.');
      } else if (event.error === 'audio-capture') {
        alert('Kh√¥ng th·ªÉ truy c·∫≠p microphone. Ki·ªÉm tra quy·ªÅn truy c·∫≠p microphone.');
      } else if (event.error === 'not-allowed') {
        alert('Tr√¨nh duy·ªát kh√¥ng cho ph√©p s·ª≠ d·ª•ng microphone.');
      } else {
        alert(`L·ªói nh·∫≠n d·∫°ng gi·ªçng n√≥i: ${event.error}`);
      }
      setIsListening(false); // D·ª´ng tr·∫°ng th√°i "ƒëang nghe" khi c√≥ l·ªói
    };
  
    recognition.onend = () => {
      console.log("K·∫øt th√∫c nh·∫≠n d·∫°ng gi·ªçng n√≥i.");
      setIsListening(false); // D·ª´ng tr·∫°ng th√°i "ƒëang nghe" khi nh·∫≠n d·∫°ng k·∫øt th√∫c
    };
  };

  // X·ª≠ l√Ω thay ƒë·ªïi n·ªôi dung √¥ t√¨m ki·∫øm
  const handleInputChange = (event) => {
    setSearchText(event.target.value);
  };

  // X·ª≠ l√Ω chuy·ªÉn h∆∞·ªõng v√† t√¨m ki·∫øm
  const handleRedirect = (searchTerm) => {
    if (searchTerm.trim()) {
      const encodedSearchTerm = encodeURIComponent(searchTerm.trim());
      navigate(`/all-products?s=${encodedSearchTerm}`);
      window.location.reload(); // T·ª± ƒë·ªông t·∫£i l·∫°i trang v·ªõi k·∫øt qu·∫£ t√¨m ki·∫øm
    }
  };

  
  return (
    <div className={`flex items-center w-full max-w-xl mx-auto ${className || ""}`}>
      {/* V√πng nh·∫≠p t√¨m ki·∫øm */}
      <div className="flex-1 flex items-center rounded-l-full p-3">
        <input
          value={searchText}
          onChange={handleInputChange}
          type="text"
          className="w-full text-sm px-5 py-3 rounded-full focus:outline-none focus:ring-2 focus:ring-gray-500 transition-all"
          placeholder="T√¨m ki·∫øm s·∫£n ph·∫©m..."
        />
      </div>

      {/* V√πng n√∫t t√¨m ki·∫øm */}
      <button
        className="h-full px-6 bg-gradient-to-r from-gray-500 to-gray-700 text-white rounded-r-full flex items-center justify-center hover:from-gray-600 hover:to-gray-800 transition-all duration-300 shadow-md"
        onClick={() => handleRedirect(searchText)}
        type="button"
      >
        <span className="text-sm font-medium">T√¨m ki·∫øm</span>
      </button>

      {/* N√∫t t√¨m ki·∫øm b·∫±ng gi·ªçng n√≥i */}
      <button
        className="ml-2 h-full px-4 bg-gradient-to-r from-blue-500 to-blue-700 text-white rounded-full flex items-center justify-center hover:from-blue-600 hover:to-blue-800 transition-all duration-300 shadow-md"
        onClick={handleVoiceSearch}
        type="button"
      >
        {isListening ? (
          // N·∫øu ƒëang nghe, hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng s√≥ng √¢m (ho·∫∑c m·ªôt bi·ªÉu t∆∞·ª£ng kh√°c)
          <span className="text-sm font-medium">üîä</span>
        ) : (
          // N·∫øu kh√¥ng ƒëang nghe, hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng mic
          <span className="text-sm font-medium">üé§</span>
        )}
      </button>
    </div>
  );
}
